package com.prakash.leetcode.NewStart.Backtracking;

import java.util.ArrayList;
import java.util.List;

public class RestoreIPAddresses {

    public static void main(String[] args) {

        System.out.println(" valid ip addresses ---> "+ new RestoreIPAddressesSolution().restoreIpAddresses

    }
}

class RestoreIPAddressesSolution{
    public List<String> restoreIpAddresses(String s) {
        List<String> results = new ArrayList<>();
        dfs(s, 0, results, "", 0);
        return results;
    }

    public void dfs(String s, int index, List<String> results, String tempStr, int dotCount){
        if(dotCount==4 && index==s.length()){
            results.add(tempStr.substring(0, tempStr.length()-1));
            return;
        }else if(dotCount==4 && index <s.length()){
            return;
        }
        for(int i=1;i<=3;i++){
            if((index+i) <= s.length()) {
                String subStr = s.substring(index, index+i);
                if(subStr.length()>1 && (subStr.charAt(0)=='0' || Integer.parseInt(subStr)>255))
                    continue;
                dfs(s, index+i, results, tempStr + subStr + ".", dotCount+1);
            }
        }
    }
}
